How MappedByteBuffer Works When we’re loading a region of the file, we can load it to the particular memory region that can be accessed later. When we know that we’ll need to read the content of a file multiple times, it’s a good idea to optimize the costly process e.g. by saving that content in the memory. Thanks to that, subsequent lookups of that part of the file will go only to the main memory without the need to load the data from the disc, reducing latency substantially. One thing that we need to be careful with when using the MappedByteBuffer is when we’re working with very large files from disc we need to make sure the file will fit in memory. Otherwise, we can fill up the entire memory and, as a consequence, run into the common OutOfMemoryException. We can overcome that by loading only part of the file based for example on usage patterns.